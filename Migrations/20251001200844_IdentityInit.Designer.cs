// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TiendaPc.Data;

#nullable disable

namespace TiendaPc.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001200844_IdentityInit")]
    partial class IdentityInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Almacen", b =>
                {
                    b.Property<int>("IdAlmacen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_almacen");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAlmacen"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Direccion")
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdAlmacen");

                    b.ToTable("almacen", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_carrito");

                    b.Property<DateTimeOffset>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("text")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdCarrito");

                    b.ToTable("carrito", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_categoria");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdCategoria");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_cliente");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("Direccion")
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NroDoc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nro_doc");

                    b.Property<string>("Telefono")
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.Property<string>("TipoDoc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_doc");

                    b.HasKey("IdCliente");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.CostoProducto", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdAlmacen")
                        .HasColumnType("integer")
                        .HasColumnName("id_almacen");

                    b.Property<decimal>("CostoPromedio")
                        .HasColumnType("numeric")
                        .HasColumnName("costo_promedio");

                    b.HasKey("IdProducto", "IdAlmacen");

                    b.ToTable("costo_producto", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.DocumentoCompra", b =>
                {
                    b.Property<int>("IdDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_doc");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDoc"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_emision");

                    b.Property<int>("IdRecepcion")
                        .HasColumnType("integer")
                        .HasColumnName("id_recepcion");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("numeric")
                        .HasColumnName("impuesto");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("moneda");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serie");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("IdDoc");

                    b.ToTable("documento_compra", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ImagenProducto", b =>
                {
                    b.Property<int>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_imagen");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdImagen"));

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<bool>("Principal")
                        .HasColumnType("boolean")
                        .HasColumnName("principal");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("IdImagen");

                    b.ToTable("imagen_producto", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ItemCarrito", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdItem"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uuid")
                        .HasColumnName("id_carrito");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.HasKey("IdItem");

                    b.ToTable("item_carrito", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ItemOrdenCompra", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdItem"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdOc")
                        .HasColumnType("integer")
                        .HasColumnName("id_oc");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.Property<decimal>("TotalLinea")
                        .HasColumnType("numeric")
                        .HasColumnName("total_linea");

                    b.HasKey("IdItem");

                    b.ToTable("item_orden_compra", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ItemPedido", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdItem"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdPedido")
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.Property<decimal>("TotalLinea")
                        .HasColumnType("numeric")
                        .HasColumnName("total_linea");

                    b.HasKey("IdItem");

                    b.ToTable("item_pedido", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ItemProforma", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdItem"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdProforma")
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.HasKey("IdItem");

                    b.ToTable("item_proforma", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ItemRecepcionCompra", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_item");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdItem"));

                    b.Property<int>("CantidadRecibida")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_recibida");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdRecepcion")
                        .HasColumnType("integer")
                        .HasColumnName("id_recepcion");

                    b.HasKey("IdItem");

                    b.ToTable("item_recepcion_compra", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_marca");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMarca"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdMarca");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.MovimientoInventario", b =>
                {
                    b.Property<int>("IdMov")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_mov");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMov"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("costo_unitario");

                    b.Property<DateTimeOffset>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("IdAlmacen")
                        .HasColumnType("integer")
                        .HasColumnName("id_almacen");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<string>("Observacion")
                        .HasColumnType("text")
                        .HasColumnName("observacion");

                    b.Property<string>("Referencia")
                        .HasColumnType("text")
                        .HasColumnName("referencia");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("IdMov");

                    b.ToTable("movimiento_inventario", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.OrdenCompra", b =>
                {
                    b.Property<int>("IdOc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_oc");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOc"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_emision");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_entrega");

                    b.Property<int>("IdAlmacen")
                        .HasColumnType("integer")
                        .HasColumnName("id_almacen");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("integer")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("numeric")
                        .HasColumnName("impuesto");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("moneda");

                    b.Property<string>("NumeroOc")
                        .HasColumnType("text")
                        .HasColumnName("numero_oc");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("IdOc");

                    b.ToTable("orden_compra", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPedido"));

                    b.Property<DateTimeOffset>("CreadoEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creado_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("numeric")
                        .HasColumnName("impuesto");

                    b.Property<string>("NumeroPedido")
                        .HasColumnType("text")
                        .HasColumnName("numero_pedido");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("IdPedido");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProducto"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("numeric")
                        .HasColumnName("costo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Especificaciones")
                        .HasColumnType("text")
                        .HasColumnName("especificaciones");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer")
                        .HasColumnName("id_categoria");

                    b.Property<int>("IdMarca")
                        .HasColumnType("integer")
                        .HasColumnName("id_marca");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric")
                        .HasColumnName("precio");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.HasKey("IdProducto");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Proforma", b =>
                {
                    b.Property<int>("IdProforma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProforma"));

                    b.Property<DateTimeOffset>("CreadaEn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creada_en");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("integer")
                        .HasColumnName("id_cliente");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("numeric")
                        .HasColumnName("impuesto");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("IdProforma");

                    b.ToTable("proforma", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_proveedor");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProveedor"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Contacto")
                        .HasColumnType("text")
                        .HasColumnName("contacto");

                    b.Property<string>("Direccion")
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("razon_social");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ruc");

                    b.Property<string>("Telefono")
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.HasKey("IdProveedor");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ProveedorProducto", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnType("integer")
                        .HasColumnName("id_proveedor");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<string>("CodigoProveedor")
                        .HasColumnType("text")
                        .HasColumnName("codigo_proveedor");

                    b.Property<decimal?>("CostoUltima")
                        .HasColumnType("numeric")
                        .HasColumnName("costo_ultima");

                    b.Property<int?>("PlazoDias")
                        .HasColumnType("integer")
                        .HasColumnName("plazo_dias");

                    b.HasKey("IdProveedor", "IdProducto");

                    b.ToTable("proveedor_producto", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.RecepcionCompra", b =>
                {
                    b.Property<int>("IdRecepcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_recepcion");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRecepcion"));

                    b.Property<DateTimeOffset>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("GuiaRemision")
                        .HasColumnType("text")
                        .HasColumnName("guia_remision");

                    b.Property<int>("IdOc")
                        .HasColumnType("integer")
                        .HasColumnName("id_oc");

                    b.Property<string>("Observacion")
                        .HasColumnType("text")
                        .HasColumnName("observacion");

                    b.HasKey("IdRecepcion");

                    b.ToTable("recepcion_compra", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ReglaPrecio", b =>
                {
                    b.Property<int>("IdRegla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_regla");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRegla"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTimeOffset>("Fin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fin");

                    b.Property<DateTimeOffset>("Inicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inicio");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("IdRegla");

                    b.ToTable("regla_precio", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.ReglaPrecioDetalle", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDetalle"));

                    b.Property<int?>("CantMax")
                        .HasColumnType("integer")
                        .HasColumnName("cant_max");

                    b.Property<int?>("CantMin")
                        .HasColumnType("integer")
                        .HasColumnName("cant_min");

                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdRegla")
                        .HasColumnType("integer")
                        .HasColumnName("id_regla");

                    b.Property<decimal?>("PrecioB2B")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_b2b");

                    b.Property<decimal?>("PrecioPromocional")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_promocional");

                    b.HasKey("IdDetalle");

                    b.ToTable("regla_precio_detalle", (string)null);
                });

            modelBuilder.Entity("TiendaPc.Models.Stock", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("integer")
                        .HasColumnName("id_producto");

                    b.Property<int>("IdAlmacen")
                        .HasColumnType("integer")
                        .HasColumnName("id_almacen");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.HasKey("IdProducto", "IdAlmacen");

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
